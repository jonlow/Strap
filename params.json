{"name":"Strap","tagline":"A simple tool for quickly bootstrapping new projects","body":"# Strap\r\n\r\nStrap is a simple tool for bootstrapping new projects based on a template Git repo. With a couple commands, it will check out the\r\nspecified repo into a new project directory, do some stuff*, initialize a new Git repo and push to the project's remote repo. \r\n\r\n\\* Before committing to the new repo, strap can create a database, import SQL, rename files and change file permissions.\r\n\r\nTutorial video here: https://vimeo.com/61434005\r\n\r\n## Installation\r\n\r\nRun this command to install\r\n\r\n    $ gem install strap\r\n\r\n## Usage\r\n\r\n### Bootstrapping a new project\r\n\r\nTo initialize a new project, execute:\r\n\r\n    $ strap init path/to/project\r\n    \r\nIn the above example, the project directory will be named \"project\". This command will simply create the project directory and\r\ndrop a \"Strapfile\" in it for you to configure. \r\n\r\nOnce the Strapfile has been configured to your specific needs (more on that below), execute:\r\n\r\n    $ strap go\r\n    \r\nThis command will check out the template repo specified in the Strapfile, run some some optional tasks and push the new project\r\nto a remote repo, if one was specified. \r\n\r\n### The Strapfile\r\n\r\nAfter running `strap init PATH`, you'll need to edit the project's Strapfile before running `strap go`. The Strapfile is where \r\nyou tell Strap what to do. All the options available to you are described in the default Strapfile:\r\n\r\n```ruby\r\n## REPO SETTINGS\r\n## ---------------------------\r\n## Source repo is required. Repo will be cloned into new project.\r\n\r\nset :source_repo, \"\"\r\n\r\n## If 'destination_repo' is set, Strap will initialize a new Git repo\r\n## and push to specified remote destination.\r\n# set :destination_repo, \"\"\r\n\r\n\r\n## DATABASE SETTINGS\r\n## ---------------------------\r\n## If you set at least 'db_name', 'db_user', and 'db_password', Strap\r\n## will attempt to create a database for you.\r\n\r\n# set :db_name, \"\"\r\n# set :db_user, \"\"\r\n# set :db_password, \"\"\r\n# set :db_socket, \"\"\r\n# set :db_host, \"\"\r\n# set :db_port, \"\"\r\n\r\n## If you specify an SQL file below, it'll be imported into your new DB.\r\n# set :sql, \"\"\r\n\r\n\r\n## FILE UTILITIES\r\n## ---------------------------\r\n\r\n## Use this to rename a file before it gets committed to new repo\r\n# rename_file \"path/to/old_name\", \"path/to/new_name\"\r\n\r\n## Use this to change permissions of a file before it gets committed\r\n# change_permissions 0777, \"change_permissions\"\r\n\r\n\r\n## CUSTOM COMMANDS\r\n## ---------------------------\r\n## Use after_bootstrap to execute any custom Ruby code after the\r\n## bootstrap process\r\n\r\nafter_bootstrap do\r\n  # Do something using Ruby\r\nend\r\n```\r\n\r\nAt the very least, you'll need to set a source repo (otherwise there really isn't any point to using the tool). \r\n\r\n### Strapfile Templates\r\n\r\nYou may find that you'd like to customize the template Strapfile, or use multiple. To do this, first run the \r\nfollowing command:\r\n\r\n    $ strap install\r\n\r\nThis will create a \".strap\" directory in your user home directory. Inside, you'll find a \"default\" Strapfile. \r\nEdit this to change the default. Additionally, you can create other templates. For example if you put a \r\nfile named \"wordpress\" in the \".strap\" directory containing settings for your default Wordpress install, you \r\ncould use \"-t\" flag to specify this custom template:\r\n\r\n    $ strap init path/to/project -t wordpress\r\n\r\nThe contents of the new project's Strapfile will match that of the \"wordpress\" template. \r\n\r\n## Inspiration\r\n\r\nThis project was inspired by Carl Crawley's EECI 2012 talk on bootstrapping ExpressionEngine. In particular, the bash script \r\nhe shared got me thinking. Thanks Carl! https://bitbucket.org/cwcrawley/eeci-talk-files/\r\n\r\n## To-do\r\n\r\n* Add some more tests for CLI commands\r\n* Figure out a way to mock file system actions in tests, so the files don't actually have to be created\r\n* Test in environments other than Mac OSX.\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}